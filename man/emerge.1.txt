EMERGE(1)                                                                                                         Portage                                                                                                        EMERGE(1)

NAME
       emerge - Command-line interface to the Portage system

SYNOPSIS
       emerge [options] [action] [ebuild | tbz2file | file | @set | atom] ...

       emerge --sync [repo | alias] ...

       emerge --info [atom]

       emerge --search somestring

       emerge --help | --version

DESCRIPTION
       emerge  is  the  definitive command-line interface to the Portage system.  It is primarily used for installing packages, and emerge can automatically handle any dependencies that the desired package has.  emerge can also update
       the ebuild repository, making new and updated packages available.  emerge gracefully handles updating installed packages to newer releases as well.  It handles both source and binary packages, and it can be used to  create  bi‐
       nary packages for distribution.

EBUILDS, TBZ2S, SETS AND ATOMS
       emerge primarily installs packages.  You can specify packages to install in five possible ways: an atom, a set, an installed file, an ebuild, or a tbz2file.

       ebuild An  ebuild must be, at a minimum, a valid Portage package directory name without a version or category, such as portage or python.  Both categories and version numbers may be used in addition, such as sys-apps/portage or
              =python-2.2.1-r2.  emerge ignores a trailing slash so that filename completion can be used.  The ebuild may also be an actual filename, such as /var/db/repos/gentoo/app-admin/python/python-2.2.1-r2.ebuild.  WARNING:  The
              implementation of emerge /path/to/ebuild is broken and so this syntax shouldn't be used.

       tbz2file
              A tbz2file must be a valid .tbz2 created with ebuild <package>-<version>.ebuild package or emerge --buildpkg [category/]<package> or quickpkg [category/]<package>.

       file   A  file must be a file or directory that has been installed by one or more packages. If an absolute path is not used, then it must begin with either "./" or "../". For directories that are owned by multiple packages, all
              owning packages will be selected. See the portageq(1) owners command if you would like to query the owners of one or more files or directories.

       set    A set is a convenient shorthand for a large group of packages. Six sets are currently always available: selected-packages, selected-sets, selected, system, profile, and world.   selected-packages  contains  the  user-se‐
              lected "world" packages that are listed in /var/lib/portage/world, while selected-sets contains the nested sets that may be listed in /var/lib/portage/world_sets.  system and profile both refer to sets of packages deemed
              necessary for your system to run properly (the differences between these two sets are documented in portage(5)).  selected encompasses both the selected-packages and selected-sets sets, while world  encompasses  the  se‐
              lected,  system and profile sets. (See FILES below for more information.) Other sets can exist depending on the current configuration. The default set configuration is located in the /usr/share/portage/config/sets direc‐
              tory.  User sets may be created by placing files in the /etc/portage/sets/ directory (see portage(5)). Note that a set is generally used in conjunction with --update. When used as arguments to emerge sets have to be pre‐
              fixed with @ to be recognized. Use the --list-sets action to display a list of available package sets.

       atom   An atom describes bounds on a package that you wish to install.  See ebuild(5) for the details on atom syntax.  For example, >=dev-lang/python-2.2.1-r2 matches the latest available version of Python greater than or equal
              to 2.2.1-r2.  Similarly, <dev-lang/python-2.0 matches the latest available version of Python before 2.0.  Note that in many shells you will need to escape characters such as '<' and  '=';  use  single-  or  double-quotes
              around the atom to get around escaping problems. You may also constrain an atom to match a specific SLOT by appending a colon and a SLOT. Example: x11-libs/qt:3.

ACTIONS
       No action
              If  no  action is specified, the action is to merge in the specified packages, satisfying any dependencies that they may have.  The arguments can be atoms, sets, installed files, ebuilds, or tbz2s.  Note that you need to
              use the --usepkg option if you want to install a tbz2.  The packages are added to the world file at the end, so that they are considered for later updating.

       --check-news
              Scan all repositories for relevant unread GLEP 42 news items, and display how many are found. See https://www.gentoo.org/glep/glep-0042.html.

       --clean
              Cleans up the system by examining the installed packages and removing older packages.  This is accomplished by looking at each installed package and separating the installed versions by slot.  Clean will remove  all  but
              the most recently installed version in each slot.  Clean should not remove unslotted packages. Note: Most recently installed means most recent, not highest version.

       --config
              Run package specific actions needed to be executed after the emerge process has completed.  This usually entails configuration file setup or other similar setups that the user may wish to run.

       --depclean, -c
              Cleans  the  system by removing packages that are not associated with explicitly merged packages. Depclean works by creating the full dependency tree from the @world set, then comparing it to installed packages. Packages
              installed, but not part of the dependency tree, will be uninstalled by depclean.  See --with-bdeps for behavior with respect to build time dependencies that are not strictly required. Packages that are part of the  world
              set  will always be kept. They can be manually added to this set with emerge --noreplace <atom>. As a safety measure, depclean will not remove any packages unless *all* required dependencies have been resolved. As a con‐
              sequence, it is often necessary to run emerge --update --newuse --deep @world prior to depclean. Also note that depclean may break link level dependencies, especially when the  --depclean-lib-check  option  is  disabled.
              Thus, it is recommended to use a tool such as revdep-rebuild(1) in order to detect such breakage.

              WARNING:  Inexperienced  users  are advised to use --pretend or --ask with this option in order to see a preview of which packages will be uninstalled. Always study the list of packages to be cleaned for any obvious mis‐
              takes. Note that packages listed in package.provided (see portage(5)) may be removed by depclean, even if they are part of the world set.

              Depclean serves as a dependency aware version of --unmerge. When given one or more atoms, it will unmerge matched packages that have no reverse dependencies. Use --depclean together with --verbose to show reverse  depen‐
              dencies.

       --deselect [ y | n ], -W
              Remove  atoms and/or sets from the world file. This action is implied by uninstall actions, including --depclean, --prune and --unmerge. Use --deselect=n in order to prevent uninstall actions from removing atoms from the
              world file.

       --help, -h
              Displays help information for emerge.  Adding one of the additional arguments listed above will give you more specific help information on that subject.  The internal emerge help documentation is updated more  frequently
              than this man page; check it out if you are having problems that this man page does not help resolve.

       --info Produces  a  list  of information to include in bug reports which aids the developers when fixing the reported problem.  Please include this information when submitting a bug report.  Expanded output can be obtained with
              the --verbose option.

       --list-sets
              Displays a list of available package sets.

       --metadata
              Transfers pregenerated metadata cache from ${repository_location}/metadata/md5-cache/ to /var/cache/edb/dep/ as is normally done on the tail end of an rsync update using emerge --sync. This process  populates  the  cache
              database that Portage uses for pre-parsed lookups of package data. It does not populate cache for repositories not distributing pregenerated metadata cache. In order to generate cache for these repositories, use --regen.
              In versions of portage >=2.1.5 the --metadata action is totally unnecessary unless the user has enabled FEATURES="metadata-transfer" in make.conf(5).

       --prune, -P
              Removes all but the highest installed version of a package from your system. Use --prune together with --verbose to show reverse dependencies or with --nodeps to ignore all dependencies.  WARNING: This action can  remove
              packages from your world file! Check the emerge output of the next --depclean run carefully! Use --depclean to avoid this issue.

       --regen
              Causes  portage to check and update the dependency cache of all ebuilds in the repository.  The cache is used to speed up searches and the building of dependency trees.  This command is not recommended for rsync users as
              rsync updates the cache using server-side caches.  If you do not know the differences between a 'rsync user' and some other user, then you are a 'rsync user' :).  Rsync users should simply run emerge --sync to regenerate
              the  cache.  After a portage update, rsync users may find it convenient to run emerge --metadata to rebuild the cache as portage does at the end of a sync operation. In order to specify parallel --regen behavior, use the
              --jobs and --load-average options. If you would like to generate and distribute cache for use by others, use egencache(1).

       --resume, -r
              Resumes the most recent merge list that has been aborted due to an error.  This re-uses the arguments and options that were given with the original command that's being resumed, and the user may also  provide  additional
              options  when  calling --resume. It is an error to provide atoms or sets as arguments to --resume, since the arguments from the resumed command are used instead.  Please note that this operation will only return an error
              on failure.  If there is nothing for portage to do, then portage will exit with a message and a success condition. A resume list will persist until it has been completed in entirety or until another  aborted  merge  list
              replaces  it.   The  resume  history is capable of storing two merge lists.  After one resume list completes, it is possible to invoke --resume once again in order to resume an older list.  The resume lists are stored in
              /var/cache/edb/mtimedb, and may be explicitly discarded by running `emaint --fix cleanresume` (see emaint(1)).

       --search, -s
              Searches for matches of the supplied string in the ebuild repository.  By default emerge uses a case-insensitive simple search, but you can enable a regular expression search by prefixing the search string with % (the  %
              prefix  can  often  be  omitted if the --regex-search-auto option is enabled).  For example, emerge --search "%^kde" searches for any package whose name starts with "kde"; emerge --search "%gcc$" searches for any package
              that ends with "gcc"; emerge --search "office" searches for any package that contains the word "office".  If you want to include the category into the search string, prepend an @: emerge --search  "%@^dev-java.*jdk".  If
              you want to search the package descriptions as well, use the --searchdesc action.

       --searchdesc, -S
              Matches the search string against the description field as well as the package name.  Take caution as the descriptions are also matched as regular expressions.

       --sync Updates repositories, for which auto-sync, sync-type and sync-uri attributes are set in repos.conf. A list of repos or aliases can be specified, in which case they will be updated regardless of their auto-sync attribute.
              See portage(5) for more information.  The PORTAGE_SYNC_STALE variable configures warnings that are shown when emerge --sync has not been executed recently.

              WARNING: The emerge --sync action will revert local changes (e.g. modifications or additions of files) inside repositories synchronized using rsync.

              NOTE: The emerge --sync command is a compatibility command.  Sync operations are now performed using the new emaint sync module. This new emaint sync module has greater functionality and  flexibility.   Please  refer  to
              emaint(1) for more information about sync operations.

              NOTE: The emerge-webrsync program will download the entire ebuild repository as a tarball, which is much faster than emerge --sync for first time syncs.

       --unmerge, -C
              WARNING:  This  action  can remove important packages! Removes all matching packages following a counter governed by CLEAN_DELAY.  This does no checking of dependencies, so it may remove packages necessary for the proper
              operation of your system.  Its arguments can be atoms or ebuilds. For a dependency aware version of --unmerge, use --depclean or --prune.  For a version with CLEAN_DELAY=0, use --rage-clean.

       --version, -V
              Displays the version number of emerge.

OPTIONS
       --accept-properties=ACCEPT_PROPERTIES
              This option temporarily overrides the ACCEPT_PROPERTIES variable. The ACCEPT_PROPERTIES variable is incremental, which means that the specified setting is appended to the existing value from your configuration. The  spe‐
              cial  -*  token can be used to discard the existing configuration value and start fresh. See the MASKED PACKAGES section and make.conf(5) for more information about ACCEPT_PROPERTIES. A typical usage example for this op‐
              tion would be to use --accept-properties=-interactive to temporarily mask interactive packages. With default configuration, this would result in an effective ACCEPT_PROPERTIES value of "* -interactive".

       --accept-restrict=ACCEPT_RESTRICT
              This option temporarily overrides the ACCEPT_RESTRICT variable. The ACCEPT_RESTRICT variable is incremental, which means that the specified setting is appended to the existing value from your configuration.  The  special
              -* token can be used to discard the existing configuration value and start fresh. See the MASKED PACKAGES section and make.conf(5) for more information about ACCEPT_RESTRICT. A typical usage example for this option would
              be to use --accept-restrict=-bindist to temporarily mask packages that are not binary re-distributable. With default configuration, this would result in an effective ACCEPT_RESTRICT value of "* -bindist".

       --alert [ y | n ], -A
              Add a terminal bell character ('\a') to all interactive prompts. This is especially useful if dependency resolution is taking a long time, and you want emerge to alert you when it is finished. If  you  use  emerge  -auAD
              world, emerge will courteously point out when it has finished calculating the graph.

              --alert may be 'y' or 'n'. 'true' and 'false' mean the same thing.  Using --alert without an option is the same as using it with 'y'.  Try it with 'emerge -aA sys-apps/portage'.

              If your terminal emulator is set up to make '\a' into a window manager urgency hint, move your cursor to a different window to get the effect.

       --alphabetical
              When displaying USE and other flag output, combines the enabled and disabled lists into one list and sorts the whole list alphabetically.

       --ask [ y | n ], -a
              Before performing the action, display what will take place (server info for --sync, --pretend output for merge, and so forth), then ask whether to proceed with the action or abort.  Using --ask is more efficient than us‐
              ing --pretend and then executing the same command without --pretend, as dependencies will only need to be calculated once. WARNING: If the "Enter" key is pressed at the prompt (with no other input), it is interpreted  as
              acceptance  of  the  first  choice.   Note  that  the  input  buffer is not cleared prior to the prompt, so an accidental press of the "Enter" key at any time prior to the prompt will be interpreted as a choice!  Use the
              --ask-enter-invalid option if you want a single "Enter" key press to be interpreted as invalid input.

       --ask-enter-invalid
              When used together with the --ask option, interpret a single "Enter" key press as invalid input. This helps prevent accidental acceptance of the first choice. This option  is  intended  to  be  set  in  the  make.conf(5)
              EMERGE_DEFAULT_OPTS variable.

       --autounmask [ y | n ]
              Automatically  unmask  packages  and  generate  package.use  settings as necessary to satisfy dependencies. This option is disabled by default, except for portions of behavior which are controlled by the --autounmask-use
              (--autounmask=n disables autounmask behavior entirely). If any configuration changes are required, then they will be displayed after the merge list and emerge  will  immediately  abort.  If  the  displayed  configuration
              changes  are satisfactory, you should copy and paste them into the specified configuration file(s), or enable the --autounmask-write option. The EMERGE_DEFAULT_OPTS variable may be used to entirely enable or disable this
              option by default in make.conf(5).

       --autounmask-backtrack < y | n >
              Allow backtracking after autounmask has detected that configuration changes are necessary. This option is not recommended, since it can cause a large amount of time to be wasted by backtracking calculations, even  though
              there is no guarantee that it will produce a solution. This option is disabled by default.

       --autounmask-continue [ y | n ]
              Automatically  apply autounmask changes to configuration files, and continue to execute the specified command. If the dependency calculation is not entirely successful, then emerge will simply abort without modifying any
              configuration files. This option implies --autounmask-backtrack=y.  WARNING: This option is intended to be used only with great caution, since it is possible for it to make nonsensical  configuration  changes  which  may
              lead to system breakage. Therefore, it is advisable to use --ask together with this option.

       --autounmask-only [ y | n ]
              Instead of doing any package building, just unmask packages and generate package.use settings as necessary to satisfy dependencies. This option is disabled by default.

       --autounmask-unrestricted-atoms [ y | n ]
              If --autounmask is enabled, keyword and mask changes using the ´=´ operator will be written. With this option, ´>=´ operators will be used whenever possible.  USE and license changes always use the latter behavior.

       --autounmask-keep-keywords [ y | n ]
              If --autounmask is enabled, no package.accept_keywords changes will be created. This leads to unsatisfied dependencies if any keyword changes are required. This option does not imply --autounmask-keep-masks, so --autoun‐
              mask is still allowed to create package.unmask changes unless the --autounmask-keep-masks is also specified.

       --autounmask-keep-masks [ y | n ]
              If --autounmask is enabled, no package.unmask or ** keyword changes will be created. This leads to unsatisfied dependencies if no other solution exists.

       --autounmask-license < y | n >
              Allow autounmask package.license changes.

       --autounmask-use < y | n >
              Allow autounmask package.use changes. This option is enabled by default (any of --autounmask=n, --autounmask-use=n, or --binpkg-respect-use=y  disables it). The EMERGE_DEFAULT_OPTS variable may be used  to  disable  this
              option by default in make.conf(5).

       --autounmask-write [ y | n ]
              If  --autounmask  is enabled, changes are written to config files, respecting CONFIG_PROTECT and --ask.  If the corresponding package.* is a file, the changes are appended to it, if it is a directory, changes are written
              to the lexicographically last file. This way it is always ensured that the new changes take precedence over existing changes. This option is automatically enabled with --ask.

       --backtrack=COUNT
              Specifies an integer number of times to backtrack if dependency calculation fails due to a conflict or an unsatisfied dependency (default: ´10´).

       --binpkg-changed-deps [ y | n ]
              Tells emerge to ignore binary packages for which the corresponding ebuild dependencies have changed since the packages were built.  In order to help avoid issues with resolving inconsistent dependencies, this  option  is
              automatically enabled unless the --usepkgonly option is enabled. Behavior with respect to changed build-time dependencies is controlled by the --with-bdeps option.

       --binpkg-respect-use [ y | n ]
              Tells  emerge  to  ignore binary packages if their USE flags don't match the current configuration. In order to help avoid issues with resolving inconsistent USE flag settings, this option is automatically enabled unless
              the --usepkgonly option is enabled. If --binpkg-respect-use is given explicitly, then it implies --autounmask-use=n, because these options naturally oppose eachother.

       --buildpkg [ y | n ], -b
              Tells emerge to build binary packages for all ebuilds processed in addition to actually merging the packages.  Useful for maintainers or if you administrate multiple Gentoo Linux systems (build once, emerge tbz2s  every‐
              where)  as  well as disaster recovery. The package will be created in the PKGDIR directory (see make.conf(5)).  An alternative for already-merged packages is to use quickpkg(1) which creates a tbz2 from the live filesys‐
              tem.

       --buildpkg-exclude ATOMS
              A space separated list of package atoms for which no binary packages should be built. This option overrides all possible ways to enable building of binary packages except for the downgrade-backup and unmerge-backup  FEA‐
              TURES settings (see make.conf(5) for more information about FEATURES settings).

       --buildpkgonly, -B
              Creates binary packages for all ebuilds processed without actually merging the packages.  This comes with the caveat that all build-time dependencies must already be emerged on the system.

       --changed-deps [ y | n ]
              Tells  emerge  to  replace  installed packages for which the corresponding ebuild dependencies have changed since the packages were built. This option also implies the --selective option. Behavior with respect to changed
              build-time dependencies is controlled by the --with-bdeps option.

       --changed-deps-report [ y | n ]
              Tells emerge to report ebuilds for which the ebuild dependencies have changed since the installed instance was built. Behavior with respect to changed build-time dependencies is controlled by the --with-bdeps option.

       --changed-slot [ y | n ]
              Tells emerge to replace installed packages for which the corresponding ebuild SLOT metadata has changed since the packages were built. This option also implies the --selective option. This may also result in rebuilds for
              any installed packages that have slot/sub-slot := operator dependencies that are sensitive to the relevant SLOT metadata.

       --changed-use, -U
              Tells  emerge to include installed packages where USE flags have changed since installation. This option also implies the --selective option. Unlike --newuse, the --changed-use option does not trigger reinstallation when
              flags that the user has not enabled are added or removed.

              NOTE: This option ignores the state of the "test" USE flag, since that flag has a special binding to FEATURES="test" (see make.conf(5) for more information about FEATURES settings).

       --color < y | n >
              Enable or disable color output.  This option will override NOCOLOR (see make.conf(5)) and may also be used to force color output when stdout is not a tty (by default, color is disabled unless stdout is a tty).

       --columns
              Used alongside --pretend to cause the package name, new version, and old version to be displayed in an aligned format for easy cut-n-paste.

       --complete-graph [ y | n ]
              This causes emerge to consider the deep dependencies of all packages from the world set. With this option enabled, emerge will bail out if it determines that the given operation will break any dependencies of  the  pack‐
              ages  that  have  been  added  to  the  graph.  Like  the --deep option, the --complete-graph option will significantly increase the time taken for dependency calculations. Note that, unlike the --deep option, the --com‐
              plete-graph option does not cause any more packages to be updated than would have otherwise been updated with the option disabled.  Using --with-bdeps=y together with --complete-graph makes the graph as complete as  pos‐
              sible.

       --complete-graph-if-new-use < y | n >
              Trigger the --complete-graph behavior if USE or IUSE will change for an installed package. This option is enabled by default.

       --complete-graph-if-new-ver < y | n >
              Trigger the --complete-graph behavior if an installed package version will change (upgrade or downgrade). This option is enabled by default.

       --config-root=DIR
              Set the PORTAGE_CONFIGROOT environment variable.

       --debug, -d
              Tells emerge to run the emerge command in --debug mode.  In this mode the bash build environment will run with the -x option, causing it to output verbose debugging information to stdout.  This also enables a plethora of
              other output (mostly dependency resolution messages).

       --deep [DEPTH], -D
              This flag forces emerge to consider the entire dependency tree of packages, instead of checking only the immediate dependencies of the packages.  As an example, this catches updates in libraries  that  are  not  directly
              listed in the dependencies of a package.  Also see --with-bdeps for behavior with respect to build time dependencies that are not strictly required.

       --depclean-lib-check [ y | n ]
              Account  for  library link-level dependencies during --depclean and --prune actions.  This option is enabled by default. If FEATURES="preserve-libs" is enabled in make.conf(5), and preserve-libs is not restricted for any
              of the packages selected for removal, then this option is ignored because any libraries that have consumers will simply be preserved.

       --digest
              Prevent corruption from being noticed. The `repoman manifest` command is the preferred way to generate manifests and it is capable of doing an entire repository or category at once (see repoman(1)).

       --dynamic-deps < y | n >
              In dependency calculations, substitute the dependencies of installed packages with the dependencies of corresponding unbuilt ebuilds from source repositories. This causes the effective dependencies of installed  packages
              to vary dynamically when source ebuild dependencies are modified. This option is enabled by default.

              WARNING:  If  you  want to disable --dynamic-deps, then it may be necessary to first run fixpackages(1) in order to get the best results. The fixpackages(1) command performs two different operations that can also be per‐
              formed separately by the `emaint --fix moveinst` and `emaint --fix movebin` commands (see emaint(1)).

       --emptytree, -e
              Reinstalls target atoms and their entire deep dependency tree, as though no packages are currently installed. You should run this with --pretend first to make sure the result is what you expect.

       --exclude, -X ATOMS
              A space separated list of package names or slot atoms.  Emerge won't install any ebuild or binary package that matches any of the given package atoms.

       --fail-clean [ y | n ]
              Clean up temporary files after a build failure. This is particularly useful if you have PORTAGE_TMPDIR on tmpfs. If this option is enabled, you probably also want to enable PORTAGE_LOGDIR (see make.conf(5)) in  order  to
              save the build log.

       --fetchonly, -f
              Instead of doing any package building, just perform fetches for all packages (fetch things from SRC_URI based upon USE setting).

       --fetch-all-uri, -F
              Instead of doing any package building, just perform fetches for all packages (fetch everything in SRC_URI regardless of USE setting).

       --fuzzy-search [ y | n ]
              Enable  or  disable  fuzzy search for search actions. When fuzzy search is enabled, a result is returned if it is sufficiently similar to the search string, without requiring an exact match. This option is enabled by de‐
              fault. Fuzzy search does not support regular expressions, therefore it is automatically disabled for regular expression searches. Fuzzy search is slightly slower than non-fuzzy search.

       --getbinpkg [ y | n ], -g
              Using the server and location defined in PORTAGE_BINHOST (see make.conf(5)), portage will download the information from each binary package found and it will use that information to help build the dependency list.   This
              option implies -k.  (Use -gK for binary-only merging.)

       --getbinpkgonly [ y | n ], -G
              This option is identical to -g, as above, except binaries from the remote server are preferred over local packages if they are not identical.

       --ignore-default-opts
              Causes EMERGE_DEFAULT_OPTS (see make.conf(5)) to be ignored.

       --ignore-built-slot-operator-deps < y | n >
              Ignore  the  slot/sub-slot  :=  operator  parts  of  dependencies  that  have  been recorded when packages where built. This option is intended only for debugging purposes, and it only affects built packages that specify
              slot/sub-slot := operator dependencies which are supported beginning with EAPI 5.

       --ignore-soname-deps < y | n >
              Ignore the soname dependencies of binary and installed packages. This option is enabled by default, since soname dependencies are relatively new, and the required metadata is not guaranteed to exist for  binary  and  in‐
              stalled packages built with older versions of portage. Also, soname dependencies will be automatically ignored for dependency calculations that can pull unbuilt ebuilds into the dependency graph, since unbuilt ebuilds do
              not have any soname dependency metadata, making it impossible to determine whether an unresolved soname dependency can be satisfied.  Therefore, --usepkgonly (or --getbinpkgonly) must be used in order  to  enable  soname
              depedency resolution when installing packages.

       --ignore-world [ y | n ]
              Ignore  the  @world  package  set  and its dependencies. This may be useful if there is a desire to perform an action even though it might break the dependencies of some installed packages (it might also remove installed
              packages in order to solve blockers). This also alters the behavior of --complete-graph options so that only deep dependencies of packages given as arguments are included in the dependency graph. This option may be  use‐
              ful as an alternative to --nodeps in cases where it is desirable to account for dependencies of packages given as arguments.

              WARNING:  This  option is intended to be used only with great caution, since it is possible for it to make nonsensical changes which may lead to system breakage. Therefore, it is advisable to use --ask together with this
              option.

       --implicit-system-deps < y | n >
              Assume that packages may have implicit dependencies on packages which belong to the @system set. This option is enabled by default. One of the effects of disabling this option is to allow the --jobs option to spawn  jobs
              without accounting for the possiblity of implicit dependencies on packages that belong to the @system set.

       -j [JOBS], --jobs[=JOBS]
              Specifies  the  number  of  packages to build simultaneously. If this option is given without an argument, emerge will not limit the number of jobs that can run simultaneously. Also see the related --load-average option.
              Similarly to the --quiet-build option, the --jobs option causes all build output to be redirected to logs.  Note that interactive packages currently force a setting of --jobs=1. This issue can be temporarily  avoided  by
              specifying --accept-properties=-interactive.

       --keep-going [ y | n ]
              Continue  as  much  as possible after an error. When an error occurs, dependencies are recalculated for remaining packages and any with unsatisfied dependencies are automatically dropped. Also see the related --skipfirst
              option.

       -l [LOAD], --load-average[=LOAD]
              Specifies that no new builds should be started if there are other builds running and the load average is at least LOAD (a floating-point number).  With no argument, removes a previous load limit.  This option  is  recom‐
              mended for use in combination with --jobs in order to avoid excess load. See make(1) for information about analogous options that should be configured via MAKEOPTS in make.conf(5).

       --misspell-suggestions < y | n >
              Enable or disable misspell suggestions. By default, emerge will show a list of packages with similar names when a package doesn't exist.  The EMERGE_DEFAULT_OPTS variable may be used to disable this option by default.

       --newrepo
              Tells emerge to recompile a package if it is now being pulled from a different repository. This option also implies the --selective option.

       --newuse, -N
              Tells emerge to include installed packages where USE flags have changed since compilation. This option also implies the --selective option.  USE flag changes include:

              A USE flag was added to a package.  A USE flag was removed from a package.  A USE flag was turned on for a package.  A USE flag was turned off for a package.

              USE  flags  may  be toggled by your profile as well as your USE and package.use settings. If you would like to skip rebuilds for which disabled flags have been added to or removed from IUSE, see the related --changed-use
              option. If you would like to skip rebuilds for specific packages, see the --exclude option.

              NOTE: This option ignores the state of the "test" USE flag, since that flag has a special binding to FEATURES="test" (see make.conf(5) for more information about FEATURES settings).

       --noconfmem
              Causes portage to disregard merge records indicating that a config file inside of a CONFIG_PROTECT directory has been merged already.  Portage will normally merge those files only once to prevent the  user  from  dealing
              with the same config multiple times.  This flag will cause the file to always be merged.

       --nodeps, -O
              Merges specified packages without merging any dependencies.  Note that the build may fail if the dependencies aren't satisfied.

       --noreplace, -n
              Skips  the  packages specified on the command-line that have already been installed.  Without this option, any package atoms or package sets you specify on the command-line will cause Portage to remerge the package, even
              if it is already installed.  Note that Portage will not remerge dependencies by default. This option can be used to update the world file without rebuilding the packages.

       --nospinner
              Disables the spinner for the session.  The spinner is active when the terminal device is determined to be a TTY.  This flag disables it regardless.

       --usepkg-exclude ATOMS
              A space separated list of package names or slot atoms. Emerge will ignore matching binary packages.

       --rebuild-exclude ATOMS
              A space separated list of package names or slot atoms. Emerge will not rebuild matching packages due to --rebuild.

       --rebuild-ignore ATOMS
              A space separated list of package names or slot atoms. Emerge will not rebuild packages that depend on matching packages due to --rebuild.

       --regex-search-auto < y | n >
              Enable or disable automatic regular expression detection for search actions.  If this option is enabled (the default), then regular expression search is automatically enabled when the search string is a valid regular ex‐
              pression which contains any of these commonly used regular expression characters or character sequences: ^ $ * [ ] { } | ? .+

       --oneshot, -1
              Emerge as normal, but do not add the packages to the world file for later updating.

              WARNING:  This  option  should only be used for packages that are reachable from the @world package set (those that would not be removed by --depclean), since dependencies of unreachable packages are allowed to be broken
              when satisfying dependencies of other packages.  Broken dependencies of this sort will invalidate assumptions that make it possible for --deep to be disabled by default.

       --onlydeps, -o
              Only merge (or pretend to merge) the dependencies of the packages specified, not the packages themselves.

       --onlydeps-with-rdeps < y | n >
              Include run time dependencies when --onlydeps is specified.  When this is disabled only build time dependencies are included. This option is enabled by default.

       --package-moves [ y | n ]
              Perform package moves when necessary. This option is enabled by default. Package moves are typically applied immediately after a --sync action. They are applied in an incremental fashion, using only  the  subset  of  the
              history of package moves which have been added or modified since the previous application of package moves.

              WARNING: This option should remain enabled under normal circumstances.  Do not disable it unless you know what you are doing.

              NOTE: The fixpackages(1) command can be used to exhaustively apply the entire history of package moves, regardless of whether or not any of the package moves have been previously applied.

       --pkg-format
              Specify which binary package format will be created as target.  Possible choices now are tar and rpm or their combinations.

       --prefix=DIR
              Set the EPREFIX environment variable.

       --pretend, -p
              Instead of actually performing the merge, simply display what *would* have been installed if --pretend weren't used.  Using --pretend is strongly recommended before installing an unfamiliar package.  In the printout:

              N   new (not yet installed)
              S   new SLOT installation (side-by-side versions)
              U   updating (to another version)
              D   downgrading (best version seems lower)
              r   reinstall (forced for some reason, possibly due to slot or sub-slot)
              R   replacing (remerging same version)
              F   fetch restricted (must be manually downloaded)
              f   fetch restricted (already downloaded)
              I   interactive (requires user input)
              B   blocked by another package (unresolved conflict)
              b   blocked by another package (automatically resolved conflict)

       --quickpkg-direct < y | n >
              Enable  use  of  installed  packages  directly  as  binary  packages.  This  is  similar  to using binary packages produced by quickpkg(1), but installed packages are used directly as though they are binary packages.  If
              --quickpkg-direct-root=DIR is not also set to something other than "/", then --root=DIR must be used, and it comes with the caveat that packages are only allowed to be installed into the root that  is  specified  by  the
              --root=DIR option (the other root which serves as a source of packages is assumed to be immutable during the entire operation).

              Default  behavior  for  handling  of  protected  configuration  files  is controlled by the QUICKPKG_DEFAULT_OPTS variable. The relevant quickpkg options are --include-config and --include-unmodified-config (refer to the
              quickpkg(1) man page). When a configuration file is not included because it is protected, an ewarn message is logged.

       --quickpkg-direct-root=DIR
              Specify the root to use as the --quickpkg-direct package source.  This root is assumed to be immutable during the entire emerge operation.  The default is set to "/".

       --quiet [ y | n ], -q
              Results may vary, but the general outcome is a reduced or condensed output from portage's displays.

       --quiet-build [ y | n ]
              Redirect all build output to logs alone, and do not display it on stdout. If a build failure occurs for a single package, the build log will be automatically displayed on stdout (unless the  --quiet-fail  option  is  en‐
              abled).  If  there are multiple build failures (due to options like --keep-going or --jobs), then the content of the log files will not be displayed, and instead the paths of the log files will be displayed together with
              the corresponding die messages.  Note that interactive packages currently force all build output to be displayed on stdout. This issue can be temporarily avoided by specifying --accept-properties=-interactive.   Further,
              note that disabling --quiet-build has no effect if --jobs is set to anything higher than 1.

       --quiet-fail [ y | n ]
              Suppresses display of the build log on stdout when build output is hidden due to options such as --jobs, --quiet, or --quiet-build. Only the die message and the path of the build log will be displayed on stdout.

       --quiet-repo-display
              In the package merge list display, suppress ::repository output, and instead use numbers to indicate which repositories package come from.

       --quiet-unmerge-warn
              Disable the warning message that's shown prior to --unmerge actions. This option is intended to be set in the make.conf(5) EMERGE_DEFAULT_OPTS variable.

       --rage-clean
              WARNING: This action can remove important packages!  --rage-clean does --unmerge with CLEAN_DELAY=0.

       --read-news [ y | n ]
              Offer to read news via eselect if there are unread news. This option has no effect unless --ask is enabled.

       --rebuild-if-new-slot [ y | n ]
              Automatically  rebuild or reinstall packages when slot/sub-slot := operator dependencies can be satisfied by a newer slot, so that older packages slots will become eligible for removal by the --depclean action as soon as
              possible. This option only affects packages that specify slot/sub-slot := dependencies which are supported beginning with EAPI 5.  Since this option requires checking of reverse dependencies, it enables  --complete-graph
              mode whenever a new slot is installed. This option is enabled by default.

              NOTE:  If  you  want  to skip all rebuilds involving slot-operator dependecies (including those that involve sub-slot changes alone), then --ignore-built-slot-operator-deps=y is the option that you are looking for, since
              --rebuild-if-new-slot does not affect rebuilds triggered by sub-slot changes alone.

       --rebuild-if-new-rev [ y | n ]
              Rebuild packages when build-time dependencies are built from source, if the dependency is not already installed with the same version and revision.

       --rebuild-if-new-ver [ y | n ]
              Rebuild packages when build-time dependencies are built from source, if the dependency is not already installed with the same version. Revision numbers are ignored.

       --rebuild-if-unbuilt [ y | n ]
              Rebuild packages when build-time dependencies are built from source.

       --rebuilt-binaries [ y | n ]
              Replace installed packages with binary packages that have been rebuilt. Rebuilds are detected by comparison of BUILD_TIME package metadata. This option is enabled automatically when using binary packages (--usepkgonly or
              --getbinpkgonly) together with --update and --deep.

       --rebuilt-binaries-timestamp=TIMESTAMP
              This option modifies emerge's behaviour only if --rebuilt-binaries is given. Only binaries that have a BUILD_TIME that is larger than the given TIMESTAMP and that is larger than that of the installed package will be con‐
              sidered by the rebuilt-binaries logic.

       --reinstall changed-use
              This is an alias for --changed-use.

       --reinstall-atoms ATOMS
              A space separated list of package names or slot atoms. Emerge will treat matching packages as if they are not installed, and reinstall them if necessary.

       --root=DIR
              Set the ROOT environment variable.

       --sysroot=DIR
              Set the SYSROOT environment variable.

       --root-deps[=rdeps]
              If no argument is given then build-time dependencies of packages for ROOT are installed to ROOT instead of /.  If the rdeps argument is given then discard all build-time dependencies of packages for ROOT.  This option is
              only meaningful when used together with ROOT and it should not be enabled under normal circumstances!

              Does not affect EAPIs that support BDEPEND.  EAPI 7 introduces BDEPEND as a means to adjust installation into / and ROOT.  Use the SYSROOT environment variable to control where DEPEND is installed to under EAPI 7.

              When ebuilds with different EAPIs feature in the same emerge run, the appropriate behaviour for each EAPI is applied independently to each ebuild.

       --search-index < y | n >
              Enable or disable indexed search for search actions. This option is enabled by default. The search index needs to be regenerated by egencache(1) after changes are made to a repository (see the --update-pkg-desc-index ac‐
              tion). This setting can be added to EMERGE_DEFAULT_OPTS (see make.conf(5)) and later overridden via the command line.

       --search-similarity PERCENTAGE
              Set the minimum similarity percentage (a floating-point number between 0 and 100). Search results with similarity percentages lower than this  are  discarded  (default:  ´80´).  This  option  has  no  effect  unless  the
              --fuzzy-search option is enabled.

       --select [ y | n ], -w
              Add specified packages to the world set (inverse of --oneshot). This is useful if you want to use EMERGE_DEFAULT_OPTS to make --oneshot behavior default.

       --selective [ y | n ]
              This  is  identical  to  the  --noreplace  option.  Some options, such as --update, imply --selective.  Use --selective=n if you want to forcefully disable --selective, regardless of options like --changed-use, --newuse,
              --noreplace, or --update.

       --skipfirst
              This option is only valid when used with --resume.  It removes the first package in the resume list. Dependencies are recalculated for remaining packages and any that have unsatisfied dependencies or are masked  will  be
              automatically dropped. Also see the related --keep-going option.

       --sync-submodule <glsa|news|profiles>
              Restrict  sync  to the specified submodule(s). This option may be specified multiple times, in order to sync multiple submodules.  Currently, this option has no effect for sync protocols other than rsync.  (--sync action
              only)

       --tree, -t
              Shows the dependency tree for the given target by indenting dependencies.  This is only really useful in combination with --emptytree or --update and --deep.

       --unordered-display
              By default the displayed merge list is sorted using the order in which the packages will be merged. When --tree is used together with this option, this constraint is removed, hopefully leading to a more  readable  depen‐
              dency tree.

       --update, -u
              Updates  packages  to the best version available, which may not always be the highest version number due to masking for testing and development. Package atoms specified on the command line are greedy, meaning that unspe‐
              cific atoms may match multiple versions of slotted packages.  This option also implies the --selective option.

       --use-ebuild-visibility [ y | n ]
              Use unbuilt ebuild metadata for visibility checks on built packages.

       --useoldpkg-atoms ATOMS
              A space separated list of package names or slot atoms. Emerge will prefer matching binary packages over newer unbuilt packages.

       --usepkg [ y | n ], -k
              Tells emerge to use binary packages (from $PKGDIR) if they are available, thus possibly avoiding some time-consuming compiles.  This option is useful for CD installs; you can export  PKGDIR=/mnt/cdrom/packages  and  then
              use  this option to have emerge "pull" binary packages from the CD in order to satisfy dependencies.  Note this option implies --with-bdeps=n.  To include build time dependencies, --with-bdeps=y must be specified explic‐
              itly.

       --usepkgonly [ y | n ], -K
              Tells emerge to only use binary packages (from $PKGDIR).  All the binary packages must be available at the time of dependency calculation or emerge will simply abort.  Portage does not use ebuild repositories when calcu‐
              lating dependency information so all masking information is ignored.  Like -k above, this option implies --with-bdeps=n.  To include build time dependencies, --with-bdeps=y must be specified explicitly.

       --usepkg-exclude-live [ y | n ]
              Tells emerge to not install from binary packages for live ebuilds.

       --verbose [ y | n ], -v
              Tell emerge to run in verbose mode.  Currently this flag causes emerge to print out GNU info errors, if any, and to show the USE flags that will be used for each package when pretending. The following symbols are affixed
              to USE flags in order to indicate their status:

              Symbol   Location    Meaning
              ──────────────────────────────────────────────────────────────

              -        prefix      not enabled (either disabled or removed)
              *        suffix      transition to or from the enabled state
              %        suffix      newly added or removed
              ()       circumfix   forced, masked, or removed
              {}       circumfix   state is bound to FEATURES settings

       --verbose-conflicts
              Make slot conflicts more verbose. Note that this may in some cases output hundreds of packages for slot conflicts.

       --verbose-slot-rebuilds [ y | n ]
              Turns on/off the extra emerge output to list which packages are causing rebuilds.  The default is set to "y" (on).

       --with-bdeps < y | n >
              In dependency calculations, pull in build time dependencies that are not strictly required. This option is automatically enabled for installation actions, meaning they will be installed, and defaults to "y" for the --de‐
              pclean action, meaning they will not be removed. In order to prevent the --with-bdeps option from being automatically enabled for installation actions, specify --with-bdeps-auto=n in either the command line or EMERGE_DE‐
              FAULT_OPTS.

              Since many users of binary packages do not want unnecessary build time dependencies installed, this option is not automatically enabled for installation actions when the --usepkg option is enabled. In order  to  pull  in
              build time dependencies for binary packages with --usepkg, --with-bdeps=y must be specified explicitly.  This also applies to options that enable the --usepkg option implicitly, such as --getbinpkg.

              This setting can be added to EMERGE_DEFAULT_OPTS (see make.conf(5)) and later overridden via the command line.

       --with-bdeps-auto < y | n >
              This  option  is  used  to  enable  or  disable  the  program  logic that causes --with-bdeps is to be automatically enabled for installation actions. This option is enabled by default. Use --with-bdeps-auto=n to prevent
              --with-bdeps from being automatically enabled for installation actions. This setting can be added to EMERGE_DEFAULT_OPTS (see make.conf(5)) and later overridden via the command line.

              NOTE: The program logic that causes --with-bdeps to be automatically enabled for installation actions does not affect removal actions such as the --depclean action. Therefore, when  --with-bdeps-auto=n  is  specified  in
              EMERGE_DEFAULT_OPTS,  it does not affect the default --with-bdeps=y setting that applies to the --depclean action. The default --with-bdeps=y setting that applies to the --depclean action can be overridden only by speci‐
              fying --with-bdeps=n.

       --with-test-deps [ y | n ]
              For packages matched by arguments, this option will pull in dependencies that are conditional on the "test" USE flag, even if "test" is not enabled in FEATURES for the matched packages. (see make.conf(5) for more  infor‐
              mation about FEATURES settings).

ENVIRONMENT OPTIONS
       EPREFIX = [path]
              Use EPREFIX to specify the target prefix to be used for merging packages or ebuilds. This variable can be set via the --prefix option or in make.conf(5) (the command line overrides other settings).
              Defaults to the prefix where portage is currently installed.

       ROOT = [path]
              Use ROOT to specify the target root filesystem to be used for merging the requested packages or ebuilds and their runtime dependencies.  This variable can be set via the --root option or in make.conf(5) (the command line
              overrides other settings).
              Defaults to /.

       SYSROOT = [path]
              Use SYSROOT to specify the target root filesystem to be used for merging the build dependencies satisfied by DEPEND.  This variable can be set via the --sysroot option or in make.conf(5) (the command line overrides other
              settings).  The value must either be / or equal to ROOT.  When cross-compiling, only the latter is valid.
              Defaults to /.

       PORTAGE_CONFIGROOT = [path]
              Use  PORTAGE_CONFIGROOT  to specify the location for various portage configuration files (see FILES for a detailed list of configuration files).  This variable can be set via the --config-root option.  However, it is now
              superseded by the SYSROOT variable and can only be given if its value matches SYSROOT or if ROOT=/.
              Defaults to /.

OUTPUT
       When utilizing emerge with the --pretend and --verbose flags, the output may be a little hard to understand at first.  This section explains the abbreviations.

       [blocks B ] app-text/dos2unix ("app-text/dos2unix" is blocking app-text/hd2u-0.8.0)
              Dos2unix is Blocking hd2u from being emerged.  Blockers are defined when two packages will clobber each others files, or otherwise cause some form of breakage in your system.  However, blockers usually do not need to  be
              simultaneously emerged because they usually provide the same functionality.

       [ebuild N ] app-games/qstat-25c
              Qstat is New to your system, and will be emerged for the first time.

       [ebuild NS ] dev-libs/glib-2.4.7
              You already have a version of glib installed, but a 'new' version in a different SLOT is available.

       [ebuild R ] sys-apps/sed-4.0.5
              Sed 4.0.5 has already been emerged, but if you run the command, then portage will Re-emerge the specified package (sed in this case).

       [ebuild F ] media-video/realplayer-8-r6
              The  realplayer  package  requires  that  you Fetch the sources manually.  When you attempt to emerge the package, if the sources are not found, then portage will halt and you will be provided with instructions on how to
              download the required files.

       [ebuild f ] media-video/realplayer-8-r6
              The realplayer package's files are already downloaded.

       [ebuild U ] net-fs/samba-2.2.8_pre1 [2.2.7a]
              Samba 2.2.7a has already been emerged and can be Updated to version 2.2.8_pre1.

       [ebuild UD] media-libs/libgd-1.8.4 [2.0.11]
              Libgd 2.0.11 is already emerged, but if you run the command, then portage will Downgrade to version 1.8.4 for you.
              This may occur if a newer version of a package has been masked because it is broken or it creates a security risk on your system and a fix has not been released yet.
              Another reason this may occur is if a package you are trying to emerge requires an older version of a package in order to emerge successfully.  In this case, libgd 2.x is incompatible with libgd  1.x.   This  means  that
              packages that were created with libgd 1.x will not compile with 2.x and must downgrade libgd first before they can emerge.

       [ebuild U ] sys-devel/distcc-2.16 [2.13-r1] USE="ipv6* -gtk -qt%"
              Here we see that the make.conf variable USE affects how this package is built.  In this example, ipv6 optional support is enabled and both gtk and qt support are disabled.  The asterisk following ipv6 indicates that ipv6
              support was disabled the last time this package was installed.  The percent sign following qt indicates that the qt option has been added to the package since it was last installed.  For information about  all  USE  sym‐
              bols, see the --verbose option documentation above.
              *Note: Flags that haven't changed since the last install are only displayed when you use the --pretend and --verbose options.  Using the --quiet option will prevent all information from being displayed.

       [ebuild r U ] dev-libs/icu-50.1.1:0/50.1.1 [50.1-r2:0/50.1]
              Icu  50.1-r2  has already been emerged and can be Updated to version 50.1.1. The r symbol indicates that a sub-slot change (from 50.1 to 50.1.1 in this case) will force packages having slot-operator dependencies on it to
              be rebuilt (as libxml2 will be rebuilt in the next example).

       [ebuild rR ] dev-libs/libxml2-2.9.0-r1:2 USE="icu"
              Libxml2 2.9.0-r1 has already been emerged, but if you run the command, then portage will Re-emerge it in order to satisfy a slot-operator dependency which forces it to be rebuilt when the  icu  sub-slot  changes  (as  it
              changed in the previous example).

       [ebuild U *] sys-apps/portage-2.2.0_alpha6 [2.1.9.25]
              Portage  2.1.9.25  is installed, but if you run the command, then portage will upgrade to version 2.2.0_alpha6. In this case, the * symbol is displayed, in order to indicate that version 2.2.0_alpha6 is masked by missing
              keyword. This type of masking display is disabled by the --quiet option if the --verbose option is not enabled simultaneously.  The following symbols are used to indicate various types of masking:

              Symbol   Mask Type
              ──────────────────────────

                #      package.mask
                *      missing keyword
                ~      unstable keyword

              NOTE: The unstable keyword symbol (~) will not be shown in cases in which the corresponding unstable keywords have been accepted globally via ACCEPT_KEYWORDS.

       NOTES  You should almost always precede any package install or update attempt with a --pretend install or update.  This lets you see how much will be done, and shows you any blocking packages that  you  will  have  to  rectify.
              This goes doubly so for the system and world sets, which can update a large number of packages if the ebuild repository has been particularly active.

       You also want to typically use --update, which ignores packages that are already fully updated but updates those that are not.

       When  you  install  a package with uninstalled dependencies and do not explicitly state those dependencies in the list of parameters, they will not be added to the world file.  If you want them to be detected for world updates,
       make sure to explicitly list them as parameters to emerge.

       USE variables may be specified on the command line to override those specified in the default locations, letting you avoid using some dependencies you may not want to have.  USE flags specified on the command line are  NOT  re‐
       membered.   For  example,  env  USE="-X -gnome" emerge mc will emerge mc with those USE settings (on Bourne-compatible shells you may omit the env part).  If you want those USE settings to be more permanent, you can put them in
       /etc/portage/package.use instead.

       If emerge --update @system or emerge --update @world fails with an error message, it may be that an ebuild uses some newer feature not present in this version of emerge.  You can use emerge --update sys-apps/portage to  upgrade
       to the lastest version, which should support any necessary new features.

MASKED PACKAGES
       NOTE: Please use caution when using development packages.  Problems and bugs resulting from misusing masked packages drains Gentoo developer time.  Please be sure you are capable of handling any problems that may ensue.

       Masks  in portage have many uses: they allow a testing period where the packages can be used in live machines; they prevent the use of a package when it will fail; and they mask existing packages that are broken or could pose a
       security risk.  Read below to find out how to unmask in various cases.  Also note that if you give emerge an ebuild, then all forms of masking will be ignored and emerge will attempt to emerge the package.

       backtracking
              When packages are masked for backtracking, it means that the dependency resolver has temporarily masked them in order to avoid dependency conflicts and/or unsatisfied dependencies. This type of mask is typically accompa‐
              nied by a message about a missed package update which has been skipped in order to avoid dependency conflicts and/or unsatisfied dependencies.

       package.mask
              The package.mask file primarily blocks the use of packages that cause problems or are known to have issues on different systems.  It resides in /var/db/repos/gentoo/profiles.

       CHOST  Use the ACCEPT_CHOSTS variable in make.conf(5) to control CHOST acceptance.

       EAPI   The EAPI variable in an ebuild(5) file is used to mask packages that are not supported by the current version of portage. Packages masked by EAPI can only be installed after portage has been upgraded.

       KEYWORDS
              The KEYWORDS variable in an ebuild file is also used for masking a package still in testing.  There are architecture-specific keywords for each package that let portage know which systems are compatible with the package.
              Packages which compile on an architecture, but have not been proven to be "stable", are masked with a tilde (~) in front of the architecture name.  emerge examines the ACCEPT_KEYWORDS environment  variable  to  allow  or
              disallow  the  emerging  of a package masked by KEYWORDS.  To inform emerge that it should build these 'testing' versions of packages, you should update your /etc/portage/package.accept_keywords file to list the packages
              you want the ´testing´ version.  See portage(5) for more information.

       LICENSE
              The LICENSE variable in an ebuild file can be used to mask packages based on licensing restrictions. emerge examines the ACCEPT_LICENSE environment variable to allow or disallow the emerging of a package  masked  by  LI‐
              CENSE. See make.conf(5) for information about ACCEPT_LICENSE, and see portage(5) for information about /etc/portage/package.license.

       PROPERTIES
              The PROPERTIES variable in an ebuild file can be used to mask packages based on properties restrictions. emerge examines the ACCEPT_PROPERTIES environment variable to allow or disallow the emerging of a package masked by
              PROPERTIES. See make.conf(5) for information about ACCEPT_PROPERTIES, and see portage(5) for information about /etc/portage/package.properties. Use the --accept-properties option to  temporarily  override  ACCEPT_PROPER‐
              TIES.

       RESTRICT
              The  RESTRICT  variable in an ebuild file can be used to mask packages based on RESTRICT tokens. emerge examines the ACCEPT_RESTRICT environment variable to allow or disallow the emerging of a package masked by RESTRICT.
              See make.conf(5) for information about ACCEPT_RESTRICT, and see portage(5) for information about /etc/portage/package.accept_restrict. Use the --accept-restrict option to temporarily override ACCEPT_RESTRICT.

CONFIGURATION FILES
       Portage has a special feature called "config file protection". The purpose of this feature is to prevent new package installs from clobbering existing configuration files. By default, config file protection  is  turned  on  for
       /etc and the KDE configuration dirs; more may be added in the future.

       When  Portage installs a file into a protected directory tree like /etc, any existing files will not be overwritten. If a file of the same name already exists, Portage will change the name of the to-be-installed file from 'foo'
       to ´._cfg0000_foo´. If ´._cfg0000_foo´ already exists, this name becomes ´._cfg0001_foo´, etc. In this way, existing files are not overwritten, allowing the administrator to manually merge the new config files and avoid any un‐
       expected changes.

       In addition to protecting overwritten files, Portage will not delete any files from a protected directory when a package is unmerged. While this may be a little bit untidy, it does prevent potentially valuable config files from
       being deleted, which is of paramount importance.

       Protected directories are set using the CONFIG_PROTECT variable, normally defined in make.globals. Directory exceptions to the CONFIG_PROTECTed directories can be specified using the CONFIG_PROTECT_MASK variable.  To find files
       that need to be updated in /etc, type find /etc -name '._cfg????_*'.

       You  can  disable  this  feature by setting CONFIG_PROTECT="-*" in make.conf(5).  Then, Portage will mercilessly auto-update your config files. Alternatively, you can leave Config File Protection on but tell Portage that it can
       overwrite files in certain specific /etc subdirectories. For example, if you wanted Portage to automatically update your rc scripts and your wget configuration, but didn't want any other changes made without your  explicit  ap‐
       proval, you'd add this to make.conf(5):

       CONFIG_PROTECT_MASK="/etc/wget /etc/rc.d"

CONFIGURATION FILES UPDATE TOOLS
       Tools such as dispatch-conf, cfg-update, and etc-update are also available to aid in the merging of these files. They provide interactive merging and can auto-merge trivial changes.

REPORTING BUGS
       Please report any bugs you encounter through our website:

       https://bugs.gentoo.org/

       Please include the output of emerge --info when you submit your bug report.

AUTHORS
       Daniel Robbins <drobbins@gentoo.org>
       Geert Bevin <gbevin@gentoo.org>
       Achim Gottinger <achim@gentoo.org>
       Nicholas Jones <carpaski@gentoo.org>
       Phil Bordelon <phil@thenexusproject.org>
       Mike Frysinger <vapier@gentoo.org>
       Marius Mauch <genone@gentoo.org>
       Jason Stubbs <jstubbs@gentoo.org>
       Brian Harring <ferringb@gmail.com>
       Zac Medico <zmedico@gentoo.org>
       Arfrever Frehtes Taifersar Arahesis <arfrever@apache.org>

FILES
       Here is a common list of files you will probably be interested in.  For a complete listing, please refer to the portage(5) man page.

       /usr/share/portage/config/sets/
              Contains the default set configuration.

       /var/lib/portage/world
              Contains a list of all user-specified packages.  You can safely edit this file, adding packages that you want to be considered in world set updates and removing those that you do not want to be considered.

       /var/lib/portage/world_sets
              This is like the world file but instead of package atoms it contains packages sets which always begin with the @ character. Use /etc/portage/sets/ to define user package sets.

       /etc/portage/make.conf
              Contains variables for the build process, overriding those in make.globals.

       /etc/portage/color.map
              Contains variables customizing colors.

       /etc/portage/sets/
              Contains user package set definitions (see portage(5)).

       /etc/dispatch-conf.conf
              Contains settings to handle automatic updates/backups of configuration files.

       /etc/portage/make.profile/make.defaults
              Contains profile-specific variables for the build process.  Do not edit this file.

       /var/db/repos/gentoo/profiles/use.desc
              Contains the master list of USE flags with descriptions of their functions.  Do not edit this file.

       /etc/portage/make.profile/virtuals
              Contains a list of default packages used to resolve virtual dependencies.  Do not edit this file.

       /etc/portage/make.profile/packages
              Contains a list of packages used for the base system.  The system and world sets consult this file.  Do not edit this file.

       /usr/share/portage/config/make.globals
              Contains the default variables for the build process.  Do not edit this file.

       /var/log/emerge.log
              Contains a log of all emerge output. This file is always appended to, so if you want to clean it, you need to do so manually.

       /var/log/emerge-fetch.log
              Contains a log of all the fetches in the previous emerge invocation.

       /var/log/portage/elog/summary.log
              Contains the emerge summaries. Installs /etc/logrotate.d/elog-save-summary.

SEE ALSO
       emerge --help, quickpkg(1), ebuild(1), ebuild(5), make.conf(5), color.map(5), portage(5)

       A number of helper applications reside in /usr/lib/portage/bin.

       The app-portage/gentoolkit package contains useful scripts such as equery (a package query tool).

Portage VERSION                                                                                                  Dec 2021                                                                                                        EMERGE(1)
